# sway config file (v4)

set $mod Mod4
# set $reset_scratchpad ~/.config/sway/restore_scratchpad.sh
# set $SCRIPT_DIR $HOME/dev/install/bin

# Configure border style <normal|1pixel|pixel xx|none|pixel>
default_border pixel 2
# for_window [class=".*"] border pixel 0

# default_floating_border normal

# Hide borders
# hide_edge_borders none

# Resize or drag windows with mouse
tiling_drag enable

# Font for window titles. Will also be used by the bar unless a different font
# Is used in the bar {} block below.
# font xft:URWGothic-Book 11
font pango:DejaVu Sans Mono 8

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# start a new terminal with clean tmux session
# bindsym $mod+Return exec urxvtc -e tmux new
# bindsym $mod+Shift+Return exec urxvtc -e tmux a
bindsym $mod+Return exec alacritty -e tmux new
bindsym $mod+Shift+Return exec alacritty -e tmux a

# kill focused window
bindsym $mod+q kill

# Start rofi(program launcher)
# Putting commas in sway config can cause issues! Either create script to run
# program or replace commas with '#'
# bindsym $mod+d exec rofi -lines 12 -padding 18 -width 60 -location 0 -show drun -sidebar-mode -columns 3 -font 'Noto Sans 8'
bindsym $mod+d exec rofi -combi-modi drun#ssh#run -show combi
# bindsym $mod+d exec dmenu_run

# Rofi as calculator
bindsym $mod+c exec --no-startup-id rofi -show calc -modi "calc:qalc +u8 -nocurrencies"
# bindsym $mod+c exec --no-startup-id rofi -show py -modi "py:ipython3"

# Ranger as file manager
bindsym $mod+o exec --no-startup-id urxvt -e fish -c "ranger-open"

# Ranger as wallpaper setter
bindsym $mod+w exec --no-startup-id urxvt -e fish -c "ranger-wallpaper"
bindsym $mod+Shift+w exec --no-startup-id urxvt -e fish -c "ranger-wal"

# Wal themes
bindsym $mod+Shift+t exec --no-startup-id fish -c "wal-theme"

# Programs
# bindsym $mod+F1 exec thunar
# bindsym $mod+F1 exec spacefm
# bindsym $mod+F2 exec firefox

# Screenshots
bindsym Print exec --no-startup-id grim -o $(swaymsg -t get_outputs | jq -r '.[] | select(.focused) | .name') "$(xdg-user-dir PICTURES)/screenshot_$(date -Iminutes).png"
bindsym $mod+Print exec --no-startup-id grim -g "$(slurp)" "$(xdg-user-dir PICTURES)/screenshot_$(date -Iminutes).png"
bindsym $mod+Shift+Print exec --no-startup-id grim -g "$(slurp)" - | wl-copy\

# Color picker
# bindsym $mod+Shift+Print exec --no-startup-id notify-send $(grim -g "$(slurp -p)" -t ppm - | convert - -format '%[pixel:p{0,0}]' txt:-)

# focus urgent window
bindsym $mod+x [urgent=latest] focus

# Change focus
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right

# Move the focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

# Split in horizontal orientation
bindsym $mod+n split h

# Split in vertical orientation
bindsym $mod+v split v

# Fullscreen mode
bindsym $mod+f fullscreen

# Change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+t layout tabbed
bindsym $mod+e layout toggle split

# Toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# Change focus between tiling / floating windows
# bindsym $mod+space focus mode_toggle

# Focus the parent container
bindsym $mod+a focus parent

# Focus the child container
bindsym $mod+Shift+a focus child

# Alt-tab behaviour
bindsym $mod+Tab workspace back_and_forth

# Switch to workspace
bindsym $mod+1 workspace 1
bindsym $mod+2 workspace 2
bindsym $mod+3 workspace 3
bindsym $mod+4 workspace 4
bindsym $mod+5 workspace 5
bindsym $mod+6 workspace 6
bindsym $mod+7 workspace 7
bindsym $mod+8 workspace 8
bindsym $mod+9 workspace 9

# Move focused container to workspace
bindsym $mod+Shift+1 move container to workspace 1
bindsym $mod+Shift+2 move container to workspace 2
bindsym $mod+Shift+3 move container to workspace 3
bindsym $mod+Shift+4 move container to workspace 4
bindsym $mod+Shift+5 move container to workspace 5
bindsym $mod+Shift+6 move container to workspace 6
bindsym $mod+Shift+7 move container to workspace 7
bindsym $mod+Shift+8 move container to workspace 8
bindsym $mod+Shift+9 move container to workspace 9

# Move workspaces
bindsym $mod+Control+h move workspace to output left
bindsym $mod+Control+j move workspace to output down
bindsym $mod+Control+k move workspace to output up
bindsym $mod+Control+l move workspace to output right

# Reload the configuration file
bindsym $mod+Shift+c reload

# Resize window mode
mode "resize" {
        bindsym h resize shrink width 25 px or 25 ppt
        bindsym j resize grow height 25 px or 25 ppt
        bindsym k resize shrink height 25 px or 25 ppt
        bindsym l resize grow width 25 px or 25 ppt
        bindsym Shift+h resize shrink width 50 px or 50 ppt
        bindsym Shift+j resize grow height 50 px or 50 ppt
        bindsym Shift+k resize shrink height 50 px or 50 ppt
        bindsym Shift+l resize grow width 50 px or 50 ppt
        bindsym Alt+h resize shrink width 2 px or 2 ppt
        bindsym Alt+j resize grow height 2 px or 2 ppt
        bindsym Alt+k resize shrink height 2 px or 2 ppt
        bindsym Alt+l resize grow width 2 px or 2 ppt

        # back to normal: Enter or Escape or q
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym q mode "default"
}

bindsym $mod+r mode "resize"

# Set shut down, restart and locking features
set $mode_system (l)ock, (e)xit, switch_(u)ser, (s)uspend, (h)ibernate, (r)eboot, (Shift+s)hutdown
mode "$mode_system" {
    # bindsym l exec --no-startup-id swayexit lock, mode "default"
    bindsym l exec --no-startup-id swaylock -c 000000 -e, mode "default"
    bindsym s exec --no-startup-id i3exit suspend, mode "default"
    bindsym u exec --no-startup-id i3exit switch_user, mode "default"
    bindsym e exec --no-startup-id i3exit logout, mode "default"
    bindsym h exec --no-startup-id i3exit hibernate, mode "default"
    bindsym r exec --no-startup-id i3exit reboot, mode "default"
    bindsym Shift+s exec --no-startup-id swayexit shutdown, mode "default"

    # exit system mode: "Enter" or "Escape"
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+0 mode "$mode_system"

# Pulse Audio controls
# NOTE: Keycode definitions can be found on https://cgit.freedesktop.org/xorg/proto/x11proto/tree/XF86keysym.h
bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume 0 +2%
bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume 0 -2%
bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute 0 toggle
# TODO: Decide what to bind on MicMute key
bindsym XF86AudioMicMute exec --no-startup-id notify-send "test"

# Screen brightness controls
# NOTE: User must be in video group (sudo usermod -g video <USER>)
bindsym XF86MonBrightnessUp exec --no-startup-id "light -A 5; notify-send 'brightness up' -h int:value:$(light -G)"
bindsym XF86MonBrightnessDown exec --no-startup-id "light -U 5; notify-send 'brightness down' -h int:value:$(light -G)"

# Toggle split direction for each window
default_orientation vertical
for_window [class="^"] split toggle

# Open specific applications in floating mode
# for_window [class="Pamac-manager"] floating enable
# for_window [class="Thunar"] floating enable
for_window [app_id="nm-openconnect-auth-dialog"] floating enable
for_window [app_id="blueman-manager"] floating enable
for_window [title="Firefox - Sharing Indicator"] floating enable
for_window [title="Launch Application"] floating enable
for_window [title="Picture-in-Picture"] floating enable
for_window [title="Picture-in-Picture"] sticky enable

# Assign the programs to workspaces
assign [class="Slack"] 3
assign [class="discord"] 3
assign [class="Steam"] 5
assign [class="csgo_linux64"] 5

# ==================== Autostart ====================

# Disable bell sound
exec --no-startup-id xset -b

# Setup multiple monitors
set $laptop eDP-1

output "*" bg /home/mato/Pictures/Background/forest.png fill
output eDP-1 pos 0 0 res 1920x1080
output DP-4 pos 1920 0 res 1920x1200
output DP-4 transform 270
output DP-7 pos 3120 0 res 1920x1200

# TODO: Test clamshell mode
bindswitch --reload lid:on output $laptop disable
bindswitch --reload lid:off output $laptop enable

# Setup wallpaper
output "*" bg /home/mato/Pictures/Background/forest.png fill
output DP-4 bg /home/mato/Pictures/Background/forest.png fill

# Startup urxvt daemon
exec_always --no-startup-id xrdb -merge ~/.Xresources
exec urxvtd -q -o -f

# Startup notification daemon
exec_always --no-startup-id "killall -q mako; mako"

# Startup the emacs daemon
exec --no-startup-id emacs --daemon

# Initialize scratchpad
#exec $reset_scratchpad

# Launch the status bar
exec_always --no-startup-id "killall -q waybar; waybar"

# Startup the sound server
# exec --no-startup-id pulseaudio -k && pulseaudio -D
# exec --no-startup-id pa-applet

# Startup the network manager
exec_always --no-startup-id "killall -q nm-applet; nm-applet --indicator"

# Startup the bluetooth manager
exec_always --no-startup-id "killall -q blueman-applet; blueman-applet"

# Startup the keyboard mouse navigation
# exec --no-startup-id keynav

# Set keyboard layouts
input type:keyboard {
        xkb_layout "us,sk"
        xkb_variant ",qwerty"
        xkb_options "grp:alt_shift_toggle"
        xkb_numlock enable
        # repeat_delay 500
        repeat_rate 50
}

input type:touchpad {
      click_method clickfinger
      dwt enabled
      tap enabled
      middle_emulation enabled
      drag disabled
}

# Theme colors
# Border color is esentialy set with barckground color
# class                   border  backgr. text    indic.   child_border
#  client.focused          #A3B8BF #A4BAC1 #80FFF9 #007700
#  client.focused_inactive #2F3D44 #2F3D44 #1ABC9C #454948
#  client.unfocused        #2F3D44 #2F3D44 #1ABC9C #454948
#  client.urgent           #CB4B16 #FDF6E3 #1ABC9C #268BD2
#  client.placeholder      #000000 #0C0C0C #FFFFFF #000000
#
#  client.background       #2B2C2B


# background: #000f14;
# focused:    #007ea7;
# danger:     #003459;
# indicator:  #00a8e8;

# class                 border  backgr. text    indic.   child_border
client.focused          #003459 #000f14 #ffffff #00a8e8  #000f14
client.focused_inactive #007ea7 #000f14 #ffffff #00a8e8  #000f14
client.unfocused        #007ea7 #000f14 #ffffff #00a8e8  #000f14
client.urgent           #007ea7 #000f14 #ffffff #00a8e8  #000f14
client.placeholder      #007ea7 #000f14 #ffffff #00a8e8  #000f14

client.background       #ffffff


# Set inner/outer gaps
# gaps inner 14
# gaps outer -2

# Additionally, you can issue commands with the following syntax. This is useful to bind keys to changing the gap size.
# gaps inner|outer current|all set|plus|minus <px>
# gaps inner all set 10
# gaps outer all plus 5

# Smart gaps (gaps used if only more than one container on the workspace)
smart_gaps on

# Smart borders (draw borders around container only if it is not the only container on this workspace)
# on|no_gaps (on=always activate and no_gaps=only activate if the gap size to the edge of the screen is 0)
smart_borders on

# Disable gaps with keypress
# bindsym $mod+Shift+d gaps inner all set 0; gaps outer all set 0; exec "sway-msg [class=\".*\"] border pixel 2"
# bindsym $mod+Shift+d exec $SCRIPT_DIR/profile.py

# Press $mod+Shift+g to enter the gap mode. Choose o or i for modifying outer/inner gaps. Press one of + / - (in-/decrement for current workspace) or 0 (remove gaps for current workspace). If you also press Shift with these keys, the change will be global for all workspaces.
set $mode_gaps Gaps: (o)uter, (i)nner, (r)eset, (q)uit
set $mode_gaps_outer Outer Gaps: +|-|0 (local), Shift + +|-|0 (global), (r)eset, (q)uit
set $mode_gaps_inner Inner Gaps: +|-|0 (local), Shift + +|-|0 (global), (r)eset, (q)uit
bindsym $mod+Shift+g mode "$mode_gaps"

mode "$mode_gaps" {
        bindsym o      mode "$mode_gaps_outer"
        bindsym i      mode "$mode_gaps_inner"
        bindsym r      gaps inner all set 14; gaps outer all set -2
        bindsym q      mode "default"
        bindsym Return mode "default"
        bindsym Escape mode "default"
}

mode "$mode_gaps_inner" {
        bindsym plus  gaps inner current plus 5
        bindsym minus gaps inner current minus 5
        bindsym 0     gaps inner current set 0
        bindsym r     gaps inner current set 14

        bindsym Shift+plus  gaps inner all plus 5
        bindsym Shift+minus gaps inner all minus 5
        bindsym Shift+0     gaps inner all set 0
        bindsym Shift+r     gaps inner all set 14

        bindsym q mode "default"
        bindsym Return mode "default"
        bindsym Escape mode "default"
}

mode "$mode_gaps_outer" {
        bindsym plus  gaps outer current plus 5
        bindsym minus gaps outer current minus 5
        bindsym 0     gaps outer current set 0
        bindsym r     gaps outer current set -2

        bindsym Shift+plus  gaps outer all plus 5
        bindsym Shift+minus gaps outer all minus 5
        bindsym Shift+0     gaps outer all set 0
        bindsym Shift+r     gaps outer all set -2

        bindsym q mode "default"
        bindsym Return mode "default"
        bindsym Escape mode "default"
}

