[color]
	ui = true
	diff = auto
	status = auto
	branch = auto

[core]
	whitespace = trailing-space,space-before-tab
	# pager = less
	pager = delta --light
	editor = nvim

[commit]
    verbose = true

[interactive]
	diffFilter = delta --color-only

[diff]
	colorMoved = default

[fetch]
	prune = true

[push]
	recurseSubmodules = check
	default = simple

[pull]
	rebase = true

[rebase]
	autoStash = true
	autoSquash = true

[tag]
    sort = -creatordate

[branch]
    sort = committerdate

[submodule]
	recurse = true

[merge]
	tool = meld
	stat = true
	log = true

# https://github.com/dandavison/delta
[delta]
    features = decorations
    side-by-side = true
    whitespace-error-style = 22 reverse

[delta "decorations"]
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none

# https://github.com/tummychow/git-absorb
[absorb]
	maxStack = 50

[alias]
	amend = commit --amend --verbose
	authors = "!git log --pretty=format:%aN | sort | uniq -c | sort -rn"
	b = branch -vv
	c = commit --verbose
	checkuot = checkout
	conflicts = diff --name-only --diff-filter=U --relative
	d = diff
	da = diff HEAD
	ds = diff --staged
	f = fetch --all --verbose --prune
	feature = "!f() { git checkout master && git pull --autostash && git checkout -b \"$1\"; }; f"
	ignored = ls-files --exclude-standard --ignored --others
	large = "!git rev-list --objects --all \
		| git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' \
		| sed -n 's/^blob //p' \
		| sort --numeric-sort --key=2 \
		| cut -c 1-12,41- \
		| numfmt --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest"
	l = log --decorate --graph --oneline -20
	ll = log --all --decorate --graph --oneline
	lll = log --all --decorate --graph --stat --pretty=fuller
	llll = log --all --decorate --graph --stat --pretty=fuller --patch
	remote = remote -v
	review = "!git f && nvim '+DiffviewOpen origin/HEAD...HEAD --imply-local'"
	s = "!f() { git status --branch && echo '' && git log --oneline -5; }; f"
	smu = submodule update --init --recursive
	pullm = "fetch origin master:master"
	unstage = restore --staged
	rebasemaster = "!git pullm && git rebase master"
	release = "!f() { set -x && git commit -m \"Release v$1\" && git tag -a \"v$1\" -m \"Release v$1\" && echo \"Check the release by running: git show\"; }; f"
	wip = "!git commit -n -m 'WIP'"
